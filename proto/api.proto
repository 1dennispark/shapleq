syntax = "proto3";
package shapleq.proto;
option go_package = "./pb";
import "data.proto";

// Config
message SetConfigRequest {
    int32 magic = 1;
    bytes config = 2;
}

message SetConfigResponse {
    int32 magic = 1;
    bytes config = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message AlterConfigRequest {
    int32 magic = 1;
    bytes config = 2;
}

message AlterConfigResponse {
    int32 magic = 1;
    bytes config = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message ShowConfigRequest {
    int32 magic = 1;
}

message ShowConfigResponse {
    int32 magic = 1;
    bytes config = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message ListTopicRequest {
    int32 magic = 1;
}

message ListTopicResponse {
    int32 magic = 1;
    repeated string topics = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message DescribeTopicRequest {
    int32 magic = 1;
    string topic_name = 2;
}

message DescribeTopicResponse {
    int32 magic = 1;
    Topic topic = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message CreateTopicRequest {
    int32 magic = 1;
    string topic_name = 2;
    string topic_description = 3;
}

message CreateTopicResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}

message DeleteTopicRequest {
    int32 magic = 1;
    string topic_name = 2;
}

message DeleteTopicResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}

// fragment
message CreateFragmentRequest {
    int32 magic = 1;
    string topic_name = 2;
}

message CreateFragmentResponse {
    int32 magic = 1;
    Fragment fragment = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message DeleteFragmentRequest {
    int32 magic = 1;
    string topic_name = 2;
    uint32 fragment_id = 3;
}

message DeleteFragmentResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}

message DescribeFragmentRequest {
    int32 magic = 1;
    string topic_name = 2;
    uint32 fragment_id = 3;
}

message DescribeFragmentResponse {
    int32 magic = 1;
    Fragment fragment = 2;
    int32 error_code = 3;
    string error_message = 4;
}

// group
message CreateGroupRequest {
    int32 magic = 1;
    string group_name = 2;
    string description = 3;
}

message CreateGroupResponse {
    int32 magic = 1;
    Group group = 2;
    int32 error_code = 3;
    string error_message = 4;
}

message ListGroupsRequest {
    int32 magic = 1;
}

message ListGroupsResponse {
    int32 magic = 1;
    repeated Group group = 2;
    int32 error_code = 3;
    string error_message = 4;
}

// Consumer can join only one group
message JoinGroupRequest {
    int32 magic = 1;
    uint64 group_id = 2;
}

message JoinGroupResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}

message LeaveGroupRequest {
    int32 magic = 1;
    uint64 group_id = 2;
}

message LeaveGroupResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}

// Note:: Only group owner can delete group
message DeleteGroupRequest {
    int32 magic = 1;
    uint64 group_id = 2;
}

message DeleteGroupResponse {
    int32 magic = 1;
    int32 error_code = 2;
    string error_message = 3;
}
// connection

message ConnectRequest {
    int32 magic = 1;
    SessionType session_type = 2;
    string topic_name = 3;
    repeated uint32 fragment_ids = 4;
}

message ConnectResponse {
    int32 magic = 1;
}

message Ping {
    int32 magic = 1;
    string echo = 2;
    uint64 broker_id = 3;
}

message Pong {
    int32 magic = 1;
    string echo = 2;
    uint32 server_version = 3;
    uint64 server_time = 4; //nanosec
}

message PutRequest {
    int32 magic = 1;
    bytes data = 2;
    uint64 seq_num = 3;
    string node_id = 4;
    uint32 fragment_id = 5;
}

message PutResponse {
    int32 magic = 1;
    string topic_name = 2;
    uint32 fragment_id = 3;
    uint64 last_offset = 4;
}

message FetchRequest {
    message OffsetInfo {
        uint32 fragment_id = 1;
        uint64 start_offset = 2;
    }
    int32 magic = 1;
    uint32 max_batch_size = 2;
    uint32 flush_interval = 3;
    repeated OffsetInfo fragmentOffsets = 4;
}

message FetchResponse {
    int32 magic = 1;
    bytes data = 2;
    uint64 offset = 3;
    uint64 seq_num = 4;
    string node_id = 5;
    string topic_name = 6;
    uint32 fragment_id = 7;
    uint64 last_offset = 8;
}

message BatchedFetchResponse {
    message Fetched {
        bytes data = 1;
        uint64 offset = 2;
        uint64 seq_num = 3;
        string node_id = 4;
        string topic_name = 5;
        uint32 fragment_id = 6;
    }
    int32 magic = 1;
    repeated Fetched items = 2;
    uint64 last_offset = 3;
}

message Ack {
    int32 magic = 1;
    uint32 code = 2;
    string msg = 3;
}

message Close {
    int32 magic = 1;
}