syntax = "proto3";
package paustq.proto;
import "data.proto";

service APIService {

    rpc Heartbeat(Ping) returns (Pong) {}
    rpc ShutdownBroker(ShutdownBrokerRequest) returns (ShutdownBrokerResponse) {}

    // Topic related RPCs
    rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse) {}
    rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse) {}

    // Partition related RPCs
    rpc CreatePartition(CreatePartitionRequest) returns (CreatePartitionResponse) {}

    // Config related RPCs
    rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {}
    rpc AlterConfig(AlterConfigRequest) returns (AlterConfigResponse) {}
    rpc ShowConfig(ShowConfigRequest) returns (ShowConfigResponse) {}

    // Group related RPCs
    rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse) {}
    rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse) {}
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {}
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {}
    rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {}
}

service StreamService {
    rpc Flow(stream StreamData) returns (stream StreamData) {}
}

// Config
message SetConfigRequest {
    bytes config = 1;
}

message SetConfigResponse {
    bytes config = 1;
    int32 error_code = 2;
}

message AlterConfigRequest {
    bytes config = 1;
}

message AlterConfigResponse {
    bytes config = 1;
}

message ShowConfigRequest {}

message ShowConfigResponse {
    bytes config = 1;
    int32 error_code = 2;
}

message CreateTopicRequest {
    Topic topic = 1;
}

message CreateTopicResponse {}

message DeleteTopicRequest {
    string topic_name = 1;
}

message DeleteTopicResponse {}

// partition
message CreatePartitionRequest {
    string topic_name = 1;
    uint32 count = 2;
}

message CreatePartitionResponse {
    Partition partition = 1;
}

// group
message CreateGroupRequest {
    string group_name = 1;
    string description = 2;
}

message CreateGroupResponse {
    Group group = 1;
}

message ListGroupsRequest {}

message ListGroupsResponse {
    repeated Group group = 1;
}

// Consumer can join only one group
message JoinGroupRequest {
    uint64 group_id = 1;
}

message JoinGroupResponse {
    Group group = 1;
}

message LeaveGroupRequest {
    uint64 group_id = 1;
}

message LeaveGroupResponse {
    Group group = 1;
}

// Note:: Only group owner can delete group
message DeleteGroupRequest {
    uint64 group_id = 1;
}

message DeleteGroupResponse {
    Group group = 1;
}

// connection

message ConnectRequest {
    SessionType session_type = 1;
    string topic_name = 2;
}

message ConnectResponse {}

message Ping {
    string echo = 1;
    uint64 broker_id = 2;
}

message Pong {
    string echo = 1;
    uint32 server_version = 2;
    uint64 server_time = 3; //nanosec
}

message ShutdownBrokerRequest {
    int32 magic = 1;
    uint64 broker_id = 2;
}

message ShutdownBrokerResponse {}


message StreamData {
    bytes msgData = 1;
}

message PutRequest {
    bytes data = 1;
}

message PutResponse {
    Partition partition = 1;
}

message FetchRequest {
    uint64 start_offset = 1;
}

message FetchResponse {
    bytes data = 1;
    Partition partition = 2;
    uint64 last_offset = 3;
    uint64 offset = 4;
    bool publishing = 5;
}

message Ack {
    uint32 code = 1;
    string msg = 2;
}